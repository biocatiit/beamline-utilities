import glob
import re
import os
import json


import numpy as np
import matplotlib.pyplot as plt
from scipy import integrate


def loadPrimusDatFile(filename):
    ''' Loads a Primus .dat format file '''

    iq_pattern = re.compile('\s*\d*[.]\d*[+eE-]*\d+\s+-?\d*[.]\d*[+eE-]*\d+\s+\d*[.]\d*[+eE-]*\d+\s*')

    i = []
    q = []
    err = []

    with open(filename, 'rU') as f:
        lines = f.readlines()

    if len(lines) == 0:
        return

    comment = ''
    line = lines[0]
    j=0
    while line.split() and line.split()[0].strip()[0] == '#':
        comment = comment+line
        j = j+1
        line = lines[j]

    fileHeader = {'comment':comment}
    parameters = {'filename' : os.path.split(filename)[1],
                  'counters' : fileHeader}

    if comment.find('model_intensity') > -1:
        #FoXS file with a fit! has four data columns
        is_foxs_fit=True
        imodel = []
    else:
        is_foxs_fit = False

    for line in lines:
        iq_match = iq_pattern.match(line)

        if iq_match:
            if not is_foxs_fit:
                found = iq_match.group().split()
                q.append(float(found[0]))
                i.append(float(found[1]))
                err.append(float(found[2]))
            else:
                found = line.split()
                q.append(float(found[0]))
                i.append(float(found[1]))
                imodel.append(float(found[2]))
                err.append(float(found[3]))


    #Check to see if there is any header from RAW, and if so get that.
    header = []
    for j in range(len(lines)):
        if '### HEADER:' in lines[j]:
            header = lines[j+1:]

    hdict = None

    if len(header)>0:
        hdr_str = ''
        for each_line in header:
            hdr_str=hdr_str+each_line
        try:
            hdict = dict(json.loads(hdr_str))
        except Exception:
            # print 'Unable to load header/analysis information. Maybe the file was not generated by RAW or was generated by an old version of RAW?'
            hdict = {}


    i = np.array(i)
    q = np.array(q)
    err = np.array(err)

    if hdict:
        for each in hdict.iterkeys():
            if each != 'filename':
                parameters[each] = hdict[each]

    return q, i, err, parameters

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/buffer1'
# fprefix = 'buffer1_006'

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/cytc2'
# fprefix = 'cytc2_002'

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/cytc3'
# fprefix = 'cytc3_003'

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/buffer2'
# fprefix = 'buffer2_004'

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/cytc4'
# fprefix = 'cytc4_005'

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/buffer3'
# fprefix = 'buffer3_006'

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/cytc5'
# fprefix = 'cytc5_007'

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/buffer6'
# fprefix = 'buffer6_001'

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/cytc6'
# fprefix = 'cytc6_002'

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/buffer7'
# fprefix = 'buffer7_003'

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/cytc7'
# fprefix = 'cytc7_004'

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/buffer8'
# fprefix = 'buffer8_005'

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/cytc8'
# fprefix = 'cytc8_006'

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/buffer9'
# fprefix = 'buffer9_007'

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/cytc9'
# fprefix = 'cytc9_008'

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/buffer10'
# fprefix = 'buffer10_009'

# datadir = '/nas_data/Pilatus1M/20190326Hopkins/dats_normalized/cytc/cytc10'
# fprefix = 'cytc10_010'

datadir = '/nas_data/Pilatus1M/2018_Run3/20181130Bilsel/dats_align_norm_renum/sosnick/b-ub06'
fprefix = 'b-ub06'


flist = glob.glob(os.path.join(datadir,fprefix+'*.dat'))

scan_nums = sorted(list(set([int(fname.split('_')[-2]) for fname in flist])))

total_i = []

findClosest = lambda a,l:min(l,key=lambda x:abs(x-a))

for scan in scan_nums:
    print 'Loading scan {}'.format(scan)
    flist = glob.glob(os.path.join(datadir, fprefix+'_{:04d}*.dat'.format(scan)))

    flist = sorted(flist, key=lambda f: int(f.split('_')[-1].strip('.dat')))

    scan_intensity = 0

    for f in flist[20:]:
        # print f
        q, i, err, parameters = loadPrimusDatFile(f)

        closest_qmin = findClosest(0.02, q)
        closest_qmax = findClosest(0.1, q)

        nmin = np.where(q == closest_qmin)[0][0]
        nmax = np.where(q == closest_qmax)[0][0]

        scan_intensity = scan_intensity + integrate.trapz(i[nmin:nmax+1], q[nmin:nmax+1])

    total_i.append(scan_intensity)


plt.bar(range(1, len(total_i)+1), total_i)
plt.show()
